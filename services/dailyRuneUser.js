const supabase = require('../supabaseClient');
const fs = require('fs');
const path = require('path');

const dailyRunes = JSON.parse(fs.readFileSync(path.join(__dirname, '../dailyRunes.json'), 'utf8'));

module.exports = {
  getDailyRune: async (req, res) => {
    const  telegramId  = req.params.telegramId; // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
      console.log("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å telegramId:", telegramId); // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ

      // 1Ô∏è‚É£ –ò—â–µ–º user_id –≤ —Ç–∞–±–ª–∏—Ü–µ `users` –ø–æ –µ–≥–æ Telegram ID
      const { data: users, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('telegram', telegramId)  // <-- –¢–£–¢ –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–û–ë–õ–ï–ú–ê
        

      if (userError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError);
        throw new Error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
      }

      let user = users.length > 0 ? users[0] : null; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç

      if (!user) {
        console.log("üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users, —Å–æ–∑–¥–∞—ë–º...");
      
        const { data: newUser, error: insertUserError } = await supabase
          .from('users')
          .insert([{ telegram: telegramId }])
          .select('id')  // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          .single();
      
        if (insertUserError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", insertUserError);
          return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
        }
      
        console.log("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:", newUser.id);
        user = newUser; // –¢–µ–ø–µ—Ä—å user —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å id
      }
      
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:", user.id);

      // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä—É–Ω—É –¥–Ω—è –≤ —Ç–∞–±–ª–∏—Ü–µ `users_runes`
      let { data: userRune, error } = await supabase
        .from('users_runes')
        .select('rune')
        .eq('user_id', user.id)
       

      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ users_runes:", error);
        throw error;
      }
      
      // 3Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ `users_runes` –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      if (!userRune|| userRune.length === 0) {
        console.log("üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users_runes, –¥–æ–±–∞–≤–ª—è–µ–º...");
        const { error: insertError } = await supabase
          .from('users_runes')
          .insert([{ user_id: user.id, rune: null }]);

        if (insertError) throw insertError;

        userRune = { rune: null };
      } else {
        userRune = userRune[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      }

      // 4Ô∏è‚É£ –ï—Å–ª–∏ —Ä—É–Ω–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
      if (!userRune.rune) {
        // –ï—Å–ª–∏ rune = NULL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä—É–±–∞—à–∫—É" (—Å–∫—Ä—ã—Ç–∞—è —Ä—É–Ω–∞)
        console.log("üìå –†—É–Ω–∞ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—É–±–∞—à–∫—É");
        return res.json({
          name: "–°–∫—Ä—ã—Ç–∞—è —Ä—É–Ω–∞",
          image: "./runes/cover.png",
          description: "–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —Ä—É–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ."
        });
      } else {
        // –ï—Å–ª–∏ rune —É–∂–µ –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        const runeData = dailyRunes.find(rune => rune.name === userRune.rune);
        console.log("üìå –†—É–Ω–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞:", runeData.name);
        return res.json({
          name: runeData.name,
          image: runeData.image,
          description: runeData.description
        });
      }
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞:", error.message);
      res.status(500).json({ error: error.message });
    }
  },
  flipRune: async (req, res) => {
    const telegramId = req.params.telegramId;

    try {
      console.log("üîÑ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Ä—É–Ω—ã –¥–ª—è telegramId:", telegramId);

      // 1Ô∏è‚É£ –ò—â–µ–º user_id –≤ —Ç–∞–±–ª–∏—Ü–µ `users`
      const { data: users, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('telegram', telegramId);

      if (userError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError);
        throw new Error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
      }

      let user = users.length > 0 ? users[0] : null;

      if (!user) {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ä—É–Ω—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:", user.id);

      // 2Ô∏è‚É£ –ò—â–µ–º –µ–≥–æ —Ä—É–Ω—É
      let { data: userRune, error: runeError } = await supabase
        .from('users_runes')
        .select('rune')
        .eq('user_id', user.id);

      if (runeError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ users_runes:", runeError);
        throw runeError;
      }

      if (!userRune || userRune.length === 0) {
        console.log("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ users_runes, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ä—É–Ω—É.");
        return res.status(400).json({ error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä—É–Ω–Ω–µ" });
      }

      userRune = userRune[0];

      // 3Ô∏è‚É£ –ï—Å–ª–∏ —Ä—É–Ω–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å–Ω–æ–≤–∞
      if (userRune.rune) {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–ª —Ä—É–Ω—É, –Ω–µ–ª—å–∑—è —Å–Ω–æ–≤–∞.");
        return res.status(400).json({ error: "–†—É–Ω–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞" });
      }

      // 4Ô∏è‚É£ –ï—Å–ª–∏ rune = NULL, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä—É–Ω—É
      const randomRune = dailyRunes[Math.floor(Math.random() * dailyRunes.length)];

      console.log("üé≤ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä—É–Ω—É, –Ω–æ–≤–∞—è:", randomRune.name);

      const { error: updateError } = await supabase
        .from('users_runes')
        .update({ rune: randomRune.id })  
        .eq('user_id', user.id);

      if (updateError) throw updateError;

      // 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—É—é —Ä—É–Ω—É
      res.json({
        name: randomRune.name,
        image: randomRune.image,
        description: randomRune.description
      });

    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞:", error.message);
      res.status(500).json({ error: error.message });
    }
  }
};
