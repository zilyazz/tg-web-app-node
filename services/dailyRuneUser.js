const supabase = require('../supabaseClient');
const fs = require('fs');
const path = require('path');
const dailyRunes = JSON.parse(fs.readFileSync(path.join(__dirname, '../runeLibr/dailyRunes.json'), 'utf8')); 

//* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—é —é–∑–µ—Ä–∞ –≤ –ë–î

async function getOrCreateUser (telegramId) {
  const { data: users, error: userError } = await supabase
    .from('users')
    .select('id')
    .eq('telegram', telegramId); 
        
  if (userError) throw new Error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");

  let user = users.length > 0 ? users[0] : null; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç

  if (!user) {
    const { data: newUser, error: insertUserError } = await supabase
      .from('users')
      .insert([{ telegram: telegramId }])
      .select('id')  // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      .single();
      
    if (insertUserError) throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"); 
    
    user = newUser; // –¢–µ–ø–µ—Ä—å user —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å id
  }
  return user;
}

//* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä—É–Ω—ã –¥–Ω—è

async function getOrCreateUserRune (userId) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä—É–Ω–µ –¥–Ω—è –≤ —Ç–∞–±–ª–∏—Ü–µ `users_runes`
  let { data: userRune, error } = await supabase
    .from('users_runes')
    .select('rune')
    .eq('user_id', userId) 

  if (error) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä—É–Ω—ã –¥–Ω—è");
      
  if (!userRune|| userRune.length === 0) {
    console.log("üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è userId:", userId);
    const { error: insertError } = await supabase
      .from('users_runes')
      .insert([{ user_id: userId, rune: null }]);

    if (insertError) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ users_runes"); 

    userRune = { rune: null };
  } else {
      userRune = userRune[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    }

  return userRune;
}

//* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫ —Ä—É–Ω—ã –ø–æ ID –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ dailyRunes

async function getRuneById(runeId) {
  if (!runeId) return null; // –ï—Å–ª–∏ —Ä—É–Ω—ã –Ω–µ—Ç, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null

  return dailyRunes.find(rune => rune.id === runeId) || null;
}

//* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä—É–Ω—ã (—Ç.–µ. –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ä—É–Ω—ã –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

async function flipRune(userId) {
  const randomRune = dailyRunes[Math.floor(Math.random() * dailyRunes.length)];
  const { error: updateError } = await supabase
    .from('users_runes')
    .update({ rune: randomRune.id })  
    .eq('user_id', userId);

  if (updateError) throw updateError;
  return randomRune;
};

module.exports = {
  getOrCreateUser,
  getOrCreateUserRune,
  getRuneById,
  flipRune
};