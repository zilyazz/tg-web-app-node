/*************************************************************
–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π (–Ω–µ –ø–æ–¥—Ä—è–¥)
*************************************************************/

//require('dotenv').config();
const supabase = require('../supabaseClient');

async function cleanUpSpreadHistory() {
    try {
        console.log("üîπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤...");

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        const { data: spreads, error: dateError } = await supabase
            .from('spreads')
            .select('Userid, DateCreate')
            .order('DateCreate', { ascending: false });

        if (dateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', dateError);
            return;
        }

        console.log("üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:", spreads.length);

        if (!spreads || spreads.length === 0) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—ã—Ö–æ–¥–∏–º.");
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userDates = {};

        spreads.forEach(({ Userid, DateCreate }) => {
            const date = new Date(DateCreate).toISOString().split('T')[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            
            if (!userDates[Userid]) {
                userDates[Userid] = new Set();
            }
            
            userDates[Userid].add(date);
        });

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const allowedDatesByUser = {};
        Object.keys(userDates).forEach(userId => {
            allowedDatesByUser[userId] = [...userDates[userId]].slice(0, 5);
        });

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
        const allowedDates = new Set();
        Object.values(allowedDatesByUser).forEach(dates => {
            dates.forEach(date => allowedDates.add(date));
        });

        console.log("‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–∞—Ç—ã:", [...allowedDates]);

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (allowedDates.size === 0) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º.");
            return;
        }

        console.log("üö® –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ —ç—Ç–∏ –¥–∞—Ç—ã:", [...allowedDates]);

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        const { error: deleteError } = await supabase
        .from('spreads')
        .delete()
        .not('DateCreate', 'in', 
          supabase
            .from('spreads')
            .select('DateCreate')
            .in('DateCreate', [...allowedDates].map(date => `${date} 00:00:00`))
        );
      
      
      
      

        if (deleteError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', deleteError);
        } else {
            console.log("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
    }
}
  cleanUpSpreadHistory();
  module.exports = cleanUpSpreadHistory;
